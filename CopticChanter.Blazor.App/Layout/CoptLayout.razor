@using CoptLib.Models
@using CoptLib.Models.Text
@using CoptLib.Extensions

@code
{
    [Parameter]
    public List<List<IDefinition>> Table { get; set; } = new();

    private int fontSize = 18;
}

@functions
{
    static string HandleInline(Inline inline)
    {
        (string css, List<string> cl) = HandleText(inline);
        var cls = string.Join(' ', cl);

        string inner = inline switch
        {
            Span span => string.Join(string.Empty, span.Inlines.Select(HandleInline)),
            _ => inline.ToString()!
        };

        return $"<span class=\"{cls}\" style=\"{css}\">{inner}</span>";
    }

    static (string css, List<string> cl) HandleText(object item)
    {
        string css = string.Empty;
        List<string> classes = new();


        if (item is IDefinition def)
        {
            var langInfo = def.GetLanguage();

            if (langInfo.Culture is { TextInfo.IsRightToLeft: true })
                css += "direction: rtl;";

            classes.Add(langInfo.Known.ToString().ToLowerInvariant());
        }

        if (item is Comment)
        {
            classes.Add("comment");
        }

        return (css, classes);
    }
}

<link rel="stylesheet" href="css/app.css" />
<link rel="stylesheet" href="css/docText.css" />

<p>Font size:</p><InputNumber @bind-Value="fontSize"/>

<style>
    table {
        font-size: @(fontSize)px;
    }
</style>

<table>
    @{
        Doc? currentDoc = null;

        @foreach (var row in Table)
        {
            if (row is [Doc doc])
            {
                // Set flag so the title of the translations
                // can be displayed in bold font
                currentDoc = doc;
                continue;
            }

            <tr>
                @foreach (var cell in row)
                {
                    object item = cell;
                    string css = string.Empty;
                    string? text = null;
                    string? docKey = currentDoc?.Key;
                    List<string> cl = new();

                    if (item is Section section)
                    {
                        item = section.Title;
                        cl.Add(currentDoc is null ? "sectionTitle" : "docName");
                    }

                    if (item is IContent content)
                    {
                        if (content.Inlines.Count == 1 && content.Inlines[0] is Run singleRun)
                        {
                            // Avoid using multiple inlines when Text can be used directly
                            text = singleRun.Text;
                        }
                        else
                        {
                            // Convert the CoptLib InlineCollection to HTML
                            foreach (Inline inline in content.Inlines)
                            {
                                HandleInline(inline);
                            }
                        }
                    }

                    // Handle language & font
                    text ??= item?.ToString();
                    var (css2, cl2) = HandleText(item!);
                    css += css2;
                    cl.AddRange(cl2);

                    if (text != null)
                    {
                        <td id="@docKey" class="@string.Join(' ', cl)" style="@css">@text</td>
                    }
                }
            </tr>

            currentDoc = null;
        }
    }
</table>
