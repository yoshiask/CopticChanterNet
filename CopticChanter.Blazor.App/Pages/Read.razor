@page "/read/{type}/{id}"
@using CoptLib.Models
@using CopticChanter.WebApi.Client

@inject CoptClient Client

@if (Title == null)
{
    <PageTitle>Coptic Chanter</PageTitle>
}
else
{
    <PageTitle>@Title - Coptic Chanter</PageTitle>
}

<div class="input-grid">
    <div class="input-group" style="grid-row: 1">
        <span class="input-group-text" id="exlg-lbl">Excluded Languages</span>
        <InputText class="form-control" @bind-Value="ExcludedTags" placeholder="Comma-separated list of languages to hide" aria-label="Excluded Languages" aria-describedby="exlg-lbl" />
    </div>

    <div class="input-group" style="grid-row: 2">
        <span class="input-group-text" id="date-lbl">Date</span>
        <InputDate class="form-control" @bind-Value="Date" placeholder="Select date" aria-label="Date" aria-describedby="date-lbl" />
    </div>

    <button class="btn btn-outline-secondary" style="grid-row: 3; width: min-content;" @onclick="LayoutOptionsChanged">Go</button>
</div>

<hr />

@if (ErrorMessage != null)
{
    <p>@ErrorMessage</p>
}
else if (IsLoaded && Table != null)
{
    <CoptLayout Table="@Table" />
}
else
{
    <p>
        <em>Loading @Title...</em>
    </p>
}

<style>
    .input-grid {
        display: grid;
        gap: 10px;
    }
</style>

@code {
    [Parameter]
    public string? Type { get; set; }

    [Parameter]
    public string? Id { get; set; }

    public bool IsLoaded { get; set; } = false;

    public string? ErrorMessage { get; set; }

    public string? Title { get; set; }

    public List<List<IDefinition>>? Table { get; set; }

    public string SessionKey { get; } = Guid.NewGuid().ToString("N").ToUpperInvariant();

    public string ExcludedTags { get; set; } = "";

    public DateTime Date { get; set; } = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Title = Id ?? throw new ArgumentNullException(nameof(Id), "An ID must be provided.");
            StateHasChanged();

            if (Type is null)
                throw new ArgumentNullException(nameof(Type), "A type must be provided.");

            var layout = await Client.GetLayoutAsync(Type, Id, SessionKey);
            Table = layout.Rows;
            StateHasChanged();

            if (Type.ToUpperInvariant() == "DOC" && layout.TryGetDoc(out var doc))
                Title = doc.Name;
        }
        catch (Flurl.Http.FlurlHttpException httpEx)
        {
            Table = null;
            ErrorMessage = await httpEx.GetResponseStringAsync();
        }
        catch (Exception ex)
        {
            Table = null;
            ErrorMessage = ex.ToString();
        }

        IsLoaded = true;
        StateHasChanged();
    }

    private async void LayoutOptionsChanged()
    {
        if (!IsLoaded)
        {
            return;
        }

        ErrorMessage = null;
        try
        {
            var excludedTags = ExcludedTags.Split(',',
                StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);

            var layout = await Client.GetLayoutAsync(Type!, Id!, SessionKey, Date, excludedTags);
            Table = layout.Rows;
        }
        catch (Flurl.Http.FlurlHttpException httpEx)
        {
            Table = null;
            ErrorMessage = await httpEx.GetResponseStringAsync();
        }
        catch (Exception ex)
        {
            Table = null;
            ErrorMessage = ex.ToString();
        }

        StateHasChanged();
    }
}