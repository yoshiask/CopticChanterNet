@page "/read/{type}/{id}"
@using CoptLib.Models
@using CopticChanter.WebApi.Client
@using System.Diagnostics.CodeAnalysis
@using CopticChanter.WebApi.Core.Requests

@inject CoptClient Client

@if (Layout == null)
{
    <PageTitle>Coptic Chanter</PageTitle>
}
else
{
    <PageTitle>@Layout.Title - Coptic Chanter</PageTitle>
}

<div class="input-grid">
    <div class="input-group" style="grid-row: 1">
        <span class="input-group-text" id="exlg-lbl">Excluded Languages</span>
        <InputText class="form-control" @bind-Value="ExcludedTags" placeholder="Comma-separated list of languages to hide" aria-label="Excluded Languages" aria-describedby="exlg-lbl" />
    </div>
    
    <div class="input-group" style="grid-row: 2">
        <span class="input-group-text" id="trnl-lbl">Transliterations</span>
        <InputText class="form-control" @bind-Value="Transliterations" placeholder="Comma-separated list of transliterations to generate. For example, 'cop/en' for Coptic-English." aria-label="Transliterations" aria-describedby="trsl-lbl" />
    </div>

    <div class="input-group" style="grid-row: 3">
        <span class="input-group-text" id="date-lbl">Date</span>
        <InputDate class="form-control" @bind-Value="Date" placeholder="Select date" aria-label="Date" aria-describedby="date-lbl" />
    </div>

    <button class="btn btn-outline-secondary" style="grid-row: 4; width: min-content;" @onclick="LayoutOptionsChanged">Go</button>
</div>

<hr />

@if (ErrorMessage != null)
{
    <p>@ErrorMessage</p>
}
else if (IsLoaded && Layout != null)
{
    <CoptLayout Table="@Layout.Rows" />
}
else
{
    <p>
        <em>Loading @Id...</em>
    </p>
}

<style>
    .input-grid {
        display: grid;
        gap: 10px;
    }
</style>

@code {
    [Parameter]
    public string? Type { get; set; }

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public string? SessionKey { get; set; }

    public bool IsLoaded { get; set; } = false;

    public string? ErrorMessage { get; set; }

    public CopticChanter.WebApi.Core.Responses.Layout? Layout { get; set; }


    public string ExcludedTags { get; set; } = "";
    public string Transliterations { get; set; } = "";

    public DateTime Date { get; set; } = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ValidateParameters();

            Layout = await Client.GetLayoutAsync(Type, Id, SessionKey, null);
            StateHasChanged();

            SessionKey = Layout.SessionKey;
        }
        catch (Flurl.Http.FlurlHttpException httpEx)
        {
            Layout = null;
            ErrorMessage = await httpEx.GetResponseStringAsync();
        }
        catch (Exception ex)
        {
            Layout = null;
            ErrorMessage = ex.ToString();
        }

        IsLoaded = true;
        StateHasChanged();
    }

    private async void LayoutOptionsChanged()
    {
        if (!IsLoaded)
        {
            return;
        }

        ErrorMessage = null;
        try
        {
            ValidateParameters();

            var excludedTags = ExcludedTags.Split(',',
                StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
            var transliterations = Transliterations.Split(',',
                StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);

            LayoutRequest options = new(Date, excludedTags, transliterations);

            Layout = await Client.GetLayoutAsync(Type!, Id!, SessionKey, options);
        }
        catch (Flurl.Http.FlurlHttpException httpEx)
        {
            Layout = null;
            ErrorMessage = await httpEx.GetResponseStringAsync();
        }
        catch (Exception ex)
        {
            Layout = null;
            ErrorMessage = ex.ToString();
        }

        StateHasChanged();
    }

    [MemberNotNull(nameof(Type))]
    [MemberNotNull(nameof(Id))]
    private void ValidateParameters()
    {
        if (Id is null)
            throw new ArgumentNullException(nameof(Id), "An ID must be provided.");

        if (Type is null)
            throw new ArgumentNullException(nameof(Type), "A type must be provided.");
    }
}