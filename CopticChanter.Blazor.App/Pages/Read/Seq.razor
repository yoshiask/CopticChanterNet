@page "/read/seq/{seqId}"
@using CoptLib.IO
@using CoptLib.Models

@inject HttpClient Http
@inject ILoadContext Context

@if (Title == null)
{
    <PageTitle>Coptic Chanter</PageTitle>
}
else
{
    <PageTitle>@Title - Coptic Chanter</PageTitle>
}

@if (ErrorMessage != null)
{
    <p>@ErrorMessage</p>
}
else if (IsLoaded && Table != null)
{
    <CoptLayout Table="@Table" />
}
else
{
    <p>
        <em>Loading @Title...</em>
    </p>
}

@code {
    [Parameter]
    public string? SeqId { get; set; }

    public bool IsLoaded { get; set; } = false;

    public string? ErrorMessage { get; set; }

    public string? Title { get; set; }

    public CoptLib.ViewModels.DocSetViewModel? ViewModel { get; set; }

    public List<List<IDefinition>>? Table { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (SeqId is null)
                throw new ArgumentNullException("A sequence ID must be provided.");

            Title = SeqId;
            StateHasChanged();

            var (filePath, allContent) = await Helpers.ResolveSequencePathAsync(Http, SeqId);
            using var seqStream = await Http.GetStreamAsync(filePath);
            var seqXml = System.Xml.Linq.XDocument.Load(seqStream);

            // Read metadata first so we can display the sequence name ASAP.
            var sequence = SequenceReader.ParseSequenceXml(seqXml, (LoadContextBase)Context);
            Title = sequence.Name;
            StateHasChanged();

            if (Context.LoadedDocs.Count <= 0)
            {
                // Load all sets into context
                foreach (var setInfo in allContent.Sets)
                {
                    var setFile = new OwlCore.Storage.HttpFile($"content/Sets/{setInfo.Value}", Http);
                    using var setFolder = new OwlCore.Storage.SharpCompress.ReadOnlyArchiveFolder(setFile);

                    DocSetReader setReader = new(setFolder, Context);
                    await setReader.ReadDocs();
                }
            }

            ViewModel = new(sequence.Name, await sequence.EnumerateDocs().ToListAsync());
            await ViewModel.CreateTablesAync();
            Table = new();
            foreach (var docTable in ViewModel.Tables)
                Table.AddRange(docTable);
        }
        catch (Exception ex)
        {
            ViewModel = null;
            Table = null;
            ErrorMessage = ex.ToString();
        }

        IsLoaded = true;
    }
}
