@page "/read/set/{setId}"
@using CoptLib.IO
@using CoptLib.Models

@inject HttpClient Http

@if (Title == null)
{
    <PageTitle>Coptic Chanter</PageTitle>
}
else
{
    <PageTitle>@Title - Coptic Chanter</PageTitle>
}

@if (ErrorMessage != null)
{
    <p>@ErrorMessage</p>
}
else if (IsLoaded && Table != null)
{
    <CoptLayout Table="@Table" />
}
else
{
    <p>
        <em>Loading @Title...</em>
    </p>
}

@code {
    [Parameter]
    public string? SetId { get; set; }

    public bool IsLoaded { get; set; } = false;

    public string? ErrorMessage { get; set; }

    public string? Title { get; set; }

    public CoptLib.ViewModels.DocSetViewModel? ViewModel { get; set; }

    public List<List<IDefinition>>? Table { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (SetId is null)
                throw new ArgumentNullException("A set ID must be provided.");

            Title = SetId;
            StateHasChanged();

            var filePath = await Helpers.ResolveSetPathAsync(Http, SetId);
            using var setStream = await Http.GetStreamAsync(filePath);
            using var setArchive = SharpCompress.Archives.Zip.ZipArchive.Open(setStream);
            using var setFolder = new OwlCore.Storage.SharpCompress.ReadOnlyArchiveFolder(setArchive, SetId, SetId);

            // Read metadata first so we can display the set name ASAP.
            // Don't create the view model until after the index is read.
            DocSetReader reader = new(setFolder);
            await reader.ReadMetadata();
            Title = reader.Set.Name;
            StateHasChanged();

            await reader.ReadDocs();
            ViewModel = new(reader.Set);
            await ViewModel.CreateTablesAync();
            Table = new();
            foreach (var docTable in ViewModel.Tables)
                Table.AddRange(docTable);
        }
        catch (Exception ex)
        {
            ViewModel = null;
            Table = null;
            ErrorMessage = ex.ToString();
        }

        IsLoaded = true;
    }
}
